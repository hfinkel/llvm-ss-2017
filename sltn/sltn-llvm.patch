diff --git a/include/llvm/Transforms/Scalar/SummerSchoolExample.h b/include/llvm/Transforms/Scalar/SummerSchoolExample.h
index 651625854b3..1f1c7cc88a8 100644
--- a/include/llvm/Transforms/Scalar/SummerSchoolExample.h
+++ b/include/llvm/Transforms/Scalar/SummerSchoolExample.h
@@ -15,6 +15,7 @@
 #define LLVM_TRANSFORMS_SCALAR_SUMMERSCHOOLEXAMPLE_H
 
 #include "llvm/Analysis/ScalarEvolution.h"
+#include "llvm/Analysis/TargetLibraryInfo.h"
 #include "llvm/IR/Function.h"
 #include "llvm/IR/IntrinsicInst.h"
 #include "llvm/IR/PassManager.h"
@@ -27,10 +28,11 @@ struct SummerSchoolExamplePass
 
   // Glue for old PM.
   bool runImpl(Function &F, AssumptionCache &AC, ScalarEvolution *SE_,
-               DominatorTree *DT_);
+               DominatorTree *DT_, const TargetLibraryInfo *TLI_);
 
   ScalarEvolution *SE = nullptr;
   DominatorTree *DT = nullptr;
+  const TargetLibraryInfo *TLI = nullptr;
 
   bool processInst(Instruction *I);
 };
diff --git a/lib/IR/Verifier.cpp b/lib/IR/Verifier.cpp
index 5855059a189..14d213b7a68 100644
--- a/lib/IR/Verifier.cpp
+++ b/lib/IR/Verifier.cpp
@@ -3803,7 +3803,7 @@ void Verifier::visitInstruction(Instruction &I) {
   }
 
   if (MDNode *Range = I.getMetadata(LLVMContext::MD_range)) {
-    Assert(isa<LoadInst>(I) || isa<CallInst>(I) || isa<InvokeInst>(I),
+    Assert(isa<LoadInst>(I) || isa<CallInst>(I) || isa<InvokeInst>(I) || isa<StoreInst>(I),
            "Ranges are only for loads, calls and invokes!", &I);
     visitRangeMetadata(I, Range, I.getType());
   }
diff --git a/lib/Transforms/Scalar/SummerSchoolExample.cpp b/lib/Transforms/Scalar/SummerSchoolExample.cpp
index 602f8b1979e..aeceace9ea0 100644
--- a/lib/Transforms/Scalar/SummerSchoolExample.cpp
+++ b/lib/Transforms/Scalar/SummerSchoolExample.cpp
@@ -16,6 +16,8 @@
 #define DEBUG_TYPE SSE_NAME
 #include "llvm/Transforms/Scalar/SummerSchoolExample.h"
 #include "llvm/Transforms/Scalar.h"
+#include "llvm/Transforms/Utils/BuildLibCalls.h"
+#include "llvm/Transforms/Utils/BasicBlockUtils.h"
 #include "llvm/ADT/SmallPtrSet.h"
 #include "llvm/ADT/Statistic.h"
 #include "llvm/Analysis/AliasAnalysis.h"
@@ -48,6 +50,7 @@ struct SummerSchoolExample : public FunctionPass {
     AU.addRequired<AssumptionCacheTracker>();
     AU.addRequired<ScalarEvolutionWrapperPass>();
     AU.addRequired<DominatorTreeWrapperPass>();
+    AU.addRequired<TargetLibraryInfoWrapperPass>();
 
     AU.setPreservesCFG();
     AU.addPreserved<AAResultsWrapperPass>();
@@ -68,6 +71,7 @@ INITIALIZE_PASS_BEGIN(SummerSchoolExample, SSE_NAME,
 INITIALIZE_PASS_DEPENDENCY(AssumptionCacheTracker)
 INITIALIZE_PASS_DEPENDENCY(DominatorTreeWrapperPass)
 INITIALIZE_PASS_DEPENDENCY(ScalarEvolutionWrapperPass)
+INITIALIZE_PASS_DEPENDENCY(TargetLibraryInfoWrapperPass)
 INITIALIZE_PASS_END(SummerSchoolExample, SSE_NAME,
                     aip_name, false, false)
 
@@ -77,7 +81,30 @@ FunctionPass *llvm::createSummerSchoolExamplePass() {
 
 bool SummerSchoolExamplePass::processInst(Instruction *I) {
   ++NumInstsSeen;
-  return false;
+
+  auto *SI = cast<StoreInst>(I);
+  Value *V = SI->getValueOperand();
+
+  MDNode *MD = I->getMetadata(LLVMContext::MD_range);
+  if (!MD)
+    return false;
+
+  auto CR = getConstantRangeFromMetadata(*MD);
+  IRBuilder<> Builder(I);
+
+  auto Lower = Builder.getInt(CR.getLower());
+  auto Upper = Builder.getInt(CR.getUpper());
+
+  auto *Cmp =
+    Builder.CreateOr(Builder.CreateICmpSLT(Builder.CreateSExtOrTrunc(V, Lower->getType()), Lower),
+                     Builder.CreateICmpSGE(Builder.CreateSExtOrTrunc(V, Upper->getType()), Upper));
+  auto *Term = SplitBlockAndInsertIfThen(Cmp, I, false);
+  Builder.SetInsertPoint(Term);
+
+  Value *Str = Builder.CreateGlobalString("out of range enum value\n");
+  emitPutS(Str, Builder, TLI);
+
+  return true;
 }
 
 bool SummerSchoolExample::runOnFunction(Function &F) {
@@ -87,20 +114,29 @@ bool SummerSchoolExample::runOnFunction(Function &F) {
   auto &AC = getAnalysis<AssumptionCacheTracker>().getAssumptionCache(F);
   ScalarEvolution *SE = &getAnalysis<ScalarEvolutionWrapperPass>().getSE();
   DominatorTree *DT = &getAnalysis<DominatorTreeWrapperPass>().getDomTree();
+  const TargetLibraryInfo *TLI = &getAnalysis<TargetLibraryInfoWrapperPass>().getTLI();
 
-  return Impl.runImpl(F, AC, SE, DT);
+  return Impl.runImpl(F, AC, SE, DT, TLI);
 }
 
 bool SummerSchoolExamplePass::runImpl(Function &F, AssumptionCache &AC,
                                            ScalarEvolution *SE_,
-                                           DominatorTree *DT_) {
+                                           DominatorTree *DT_,
+                                           const TargetLibraryInfo *TLI_) {
   SE = SE_;
   DT = DT_;
+  TLI = TLI_;
+
+  SmallVector<StoreInst *, 8> Stores;
 
   bool Changed = false;
   for (auto &BB : F)
     for (auto &I : BB)
-      Changed |= processInst(&I);
+      if (auto *SI = dyn_cast<StoreInst>(&I))
+        Stores.push_back(SI);
+
+  for (auto SI : Stores)
+      Changed |= processInst(SI);
 
   return Changed;
 }
@@ -111,7 +147,8 @@ SummerSchoolExamplePass::run(Function &F, FunctionAnalysisManager &AM) {
   AssumptionCache &AC = AM.getResult<AssumptionAnalysis>(F);
   ScalarEvolution &SE = AM.getResult<ScalarEvolutionAnalysis>(F);
   DominatorTree &DT = AM.getResult<DominatorTreeAnalysis>(F);
-  bool Changed = runImpl(F, AC, &SE, &DT);
+  const TargetLibraryInfo &TLI = AM.getResult<TargetLibraryAnalysis>(F);
+  bool Changed = runImpl(F, AC, &SE, &DT, &TLI);
 
   if (!Changed)
     return PreservedAnalyses::all();
